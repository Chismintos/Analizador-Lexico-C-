using System;
using System.Collections.Generic;

class NodoExpresion
{
    public string Valor { get; set; }
    public NodoExpresion? Izquierda { get; set; } // Permitir nulos
    public NodoExpresion? Derecha { get; set; } // Permitir nulos

    public NodoExpresion(string valor)
    {
        Valor = valor;
        Izquierda = null;
        Derecha = null;
    }
}

class AnalizadorSintactico
{
    private List<string> tokens;
    private int pos;
    private string? tokenActual; // Permitir nulos

    public AnalizadorSintactico(List<string> tokens)
    {
        this.tokens = tokens;
        this.pos = 0;
        this.tokenActual = this.tokens.Count > 0 ? this.tokens[this.pos] : null;
    }

    private void Avanzar()
    {
        pos++;
        tokenActual = pos < tokens.Count ? tokens[pos] : null; // Asignar null si se pasa del límite
    }

    private void Error(string mensaje)
    {
        throw new Exception("Error de sintaxis: " + mensaje);
    }

    public NodoExpresion Parsear()
    {
        return Expresion();
    }

    private NodoExpresion Expresion()
    {
        NodoExpresion nodo = Termino();

        while (tokenActual == "+" || tokenActual == "-")
        {
            string operador = tokenActual;
            Avanzar();
            NodoExpresion nodoDerecho = Termino();
            NodoExpresion nuevoNodo = new NodoExpresion(operador)
            {
                Izquierda = nodo,
                Derecha = nodoDerecho
            };

            ImprimirExpresion(nuevoNodo);
            nodo = nuevoNodo;
        }

        return nodo;
    }

    private NodoExpresion Termino()
    {
        NodoExpresion nodo = Factor();

        while (tokenActual == "*" || tokenActual == "/")
        {
            string operador = tokenActual;
            Avanzar();
            NodoExpresion nodoDerecho = Factor();
            NodoExpresion nuevoNodo = new NodoExpresion(operador)
            {
                Izquierda = nodo,
                Derecha = nodoDerecho
            };

            ImprimirExpresion(nuevoNodo);
            nodo = nuevoNodo;
        }

        return nodo;
    }

    private NodoExpresion Factor()
    {
        string token = tokenActual;

        if (int.TryParse(token, out _))
        {
            Avanzar();
            return new NodoExpresion(token);
        }
        else if (token == "(")
        {
            Avanzar();
            NodoExpresion nodo = Expresion();
            if (tokenActual == ")")
            {
                Avanzar();
                return nodo;
            }
            else
            {
                Error("Se esperaba ')'");
            }
        }
        else
        {
            Error("Token inesperado");
        }

        return null; // No debería llegar aquí
    }

    private void ImprimirExpresion(NodoExpresion nodo)
    {
        if (nodo != null)
        {
            Console.WriteLine("Nueva expresión:");
            ImprimirArbol(nodo);
            Console.WriteLine();
        }
    }

    public static void ImprimirArbol(NodoExpresion? nodo, int nivel = 0) // Permitir nulos
    {
        if (nodo != null)
        {
            ImprimirArbol(nodo.Derecha, nivel + 1);
            Console.WriteLine(new string(' ', nivel * 4) + nodo.Valor);
            ImprimirArbol(nodo.Izquierda, nivel + 1);
        }
    }
}

class Program
{
    static void Main()
    {
        string expresion = "3 + 5 * ( 10 - 2 ) / 4";
        List<string> tokens = new List<string>(expresion.Split(new char[] { ' ' }, StringSplitOptions.RemoveEmptyEntries));

        AnalizadorSintactico parser = new AnalizadorSintactico(tokens);
        Console.WriteLine("Tokens: " + string.Join(", ", tokens));

        NodoExpresion arbol = parser.Parsear();

        Console.WriteLine("Árbol Sintáctico Final:");
        AnalizadorSintactico.ImprimirArbol(arbol);
    }
}
